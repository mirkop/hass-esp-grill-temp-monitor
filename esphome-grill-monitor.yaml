# ESPHome configuration for Smart Grill/Oven Food Temperature Monitor
# See https://esphome.io/guides/yaml for details

esphome:
  name: grill_temp_monitor
  friendly_name: Grill Temp Monitor

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "GrillTempMonitor Fallback"
    password: "fallback_password"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

# Optional BLE support
# esp32_ble_tracker:

# Optional display (SSD1306 OLED)
display:
  - platform: ssd1306_i2c
    id: my_display
    model: "SSD1306 128x64"
    address: 0x3C
    brightness:
      lambda: 'return id(display_brightness).state;'
    pages:
      - id: page0
        lambda: |-
          it.printf(0, 0, id(font1), "P1: %.1f°C", id(probe1_temp).state);
          it.printf(0, 16, id(font1), "P2: %.1f°C", id(probe2_temp).state);
      - id: page1
        lambda: |-
          it.printf(0, 0, id(font1), "P3: %.1f°C", id(probe3_temp).state);
          it.printf(0, 16, id(font1), "P4: %.1f°C", id(probe4_temp).state);
      - id: page2
        lambda: |-
          it.printf(0, 0, id(font1), "WiFi: %d dBm", (int)id(wifi_signal).state);
          it.printf(0, 16, id(font1), "Uptime: %ds", (int)id(device_uptime).state);
      - id: page3
        lambda: |-
          it.printf(0, 0, id(font1), "Battery: %.2fV", id(battery_voltage).state);
    lambda: |-
      id(my_display).show_page((int)id(display_page).state);
      if (id(display_power).state) {
        it.set_brightness(id(display_brightness).state);
      } else {
        it.set_brightness(0);
      }

font:
  - file: "fonts/arial.ttf"
    id: font1
    size: 12

sensor:
  # Probe 1 raw resistance
  - platform: resistance
    id: probe1_raw
    sensor: adc1
  # Probe 2 raw resistance
  - platform: resistance
    id: probe2_raw
    sensor: adc2
  # Probe 3 raw resistance
  - platform: resistance
    id: probe3_raw
    sensor: adc3
  # Probe 4 raw resistance
  - platform: resistance
    id: probe4_raw
    sensor: adc4
  # Probe 1 temperature
  - platform: ntc
    sensor: probe1_raw
    calibration:
      # Add calibration points here
    name: "Probe 1 Temperature"
    id: probe1_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - lambda: "return x + id(probe1_offset).state;"
  # Probe 2 temperature
  - platform: ntc
    sensor: probe2_raw
    calibration:
      # Add calibration points here
    name: "Probe 2 Temperature"
    id: probe2_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - lambda: "return x + id(probe2_offset).state;"
  # Probe 3 temperature
  - platform: ntc
    sensor: probe3_raw
    calibration:
      # Add calibration points here
    name: "Probe 3 Temperature"
    id: probe3_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - lambda: "return x + id(probe3_offset).state;"
  # Probe 4 temperature
  - platform: ntc
    sensor: probe4_raw
    calibration:
      # Add calibration points here
    name: "Probe 4 Temperature"
    id: probe4_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - lambda: "return x + id(probe4_offset).state;"
  # WiFi signal strength
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    update_interval: 60s
  # Device uptime
  - platform: uptime
    name: "Device Uptime"
    id: device_uptime
  # Battery voltage (if battery powered)
  - platform: adc
    pin: 34
    name: "Battery Voltage"
    update_interval: 60s

number:
  - platform: template
    name: "Probe 1 Offset"
    id: probe1_offset
    min_value: -10
    max_value: 10
    step: 0.1
    initial_value: 0
  - platform: template
    name: "Probe 2 Offset"
    id: probe2_offset
    min_value: -10
    max_value: 10
    step: 0.1
    initial_value: 0
  - platform: template
    name: "Probe 3 Offset"
    id: probe3_offset
    min_value: -10
    max_value: 10
    step: 0.1
    initial_value: 0
  - platform: template
    name: "Probe 4 Offset"
    id: probe4_offset
    min_value: -10
    max_value: 10
    step: 0.1
    initial_value: 0
  # Alert threshold for each probe
  - platform: template
    name: "Probe 1 Alert Threshold"
    id: probe1_alert
    min_value: 0
    max_value: 300
    step: 1
    initial_value: 80
  - platform: template
    name: "Probe 2 Alert Threshold"
    id: probe2_alert
    min_value: 0
    max_value: 300
    step: 1
    initial_value: 80
  - platform: template
    name: "Probe 3 Alert Threshold"
    id: probe3_alert
    min_value: 0
    max_value: 300
    step: 1
    initial_value: 80
  - platform: template
    name: "Probe 4 Alert Threshold"
    id: probe4_alert
    min_value: 0
    max_value: 300
    step: 1
    initial_value: 80
  - platform: template
    name: "Display Brightness"
    id: display_brightness
    min_value: 0
    max_value: 1
    step: 0.01
    initial_value: 1
    set_action:
      - lambda: 'id(my_display).set_brightness(x);'
  - platform: template
    name: "Display Page"
    id: display_page
    min_value: 0
    max_value: 3
    step: 1
    initial_value: 0
    set_action:
      - lambda: 'id(my_display).show_page((int)x);'

binary_sensor:
  - platform: status
    name: "Device Status"

output:
  - platform: gpio
    pin: 25
    id: buzzer
  - platform: gpio
    pin: 26
    id: status_led

switch:
  - platform: output
    name: "Buzzer"
    output: buzzer
  - platform: output
    name: "Status LED"
    output: status_led
  - platform: template
    name: "Display Power"
    id: display_power
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      - lambda: 'id(my_display).turn_on();'
    turn_off_action:
      - lambda: 'id(my_display).turn_off();'

# Automations: Buzzer alert when probe temperature exceeds threshold
interval:
  - interval: 5s
    then:
      - if:
          condition:
            or:
              - lambda: "return id(probe1_temp).state > id(probe1_alert).state;"
              - lambda: "return id(probe2_temp).state > id(probe2_alert).state;"
              - lambda: "return id(probe3_temp).state > id(probe3_alert).state;"
              - lambda: "return id(probe4_temp).state > id(probe4_alert).state;"
          then:
            - switch.turn_on: buzzer
            - switch.turn_on: status_led
          else:
            - switch.turn_off: buzzer
            - switch.turn_off: status_led
# Home Assistant Integration Tips:
# - All sensors, numbers, and switches are automatically exposed as entities in Home Assistant via the ESPHome integration.
# - Use Home Assistant automations to send notifications, log data, or trigger other actions based on probe temperatures or device status.
# - You can create Lovelace dashboard cards to display probe temperatures, battery, WiFi signal, and device status.
# - Use the "Device Status" binary_sensor to monitor if the device is online/offline.
# - For advanced automations, combine ESPHome and Home Assistant triggers (e.g., send a mobile alert if a probe exceeds a threshold and the device is outdoors).
